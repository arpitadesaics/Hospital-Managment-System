/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package communityAdmin;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Houses;
import model.cityArrayList;
import model.communityArrayList;
import model.houseArrayList;

/**
 *
 * @author DELL
 */
public class houCommunityAdmin extends javax.swing.JPanel {

    /**
     * Creates new form houCommunityAdmin
     */
    houseArrayList ho;
    cityArrayList c;
    communityArrayList co;
    public houCommunityAdmin(houseArrayList ho,cityArrayList c,communityArrayList co) {
        initComponents();
        this.ho=ho;
        this.c=c;
        this.co=co;
        populateTable();
        populateCity();
        populateCountry();
        populateState();
        populateCommunity();
        populateZipcode();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        titlePatient = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableho = new javax.swing.JTable();
        houseno = new javax.swing.JTextField();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        view = new javax.swing.JButton();
        lblName2 = new javax.swing.JLabel();
        houseid = new javax.swing.JTextField();
        lblName3 = new javax.swing.JLabel();
        lblName4 = new javax.swing.JLabel();
        lblName5 = new javax.swing.JLabel();
        lblName6 = new javax.swing.JLabel();
        lblName7 = new javax.swing.JLabel();
        state = new javax.swing.JComboBox<>();
        city = new javax.swing.JComboBox<>();
        community = new javax.swing.JComboBox<>();
        country = new javax.swing.JComboBox<>();
        zipcode = new javax.swing.JComboBox<>();

        titlePatient.setFont(new java.awt.Font("Sylfaen", 3, 36)); // NOI18N
        titlePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlePatient.setText("House Details");
        titlePatient.setToolTipText("");

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName.setText("House No");

        tableho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "House Name", "House Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableho);

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        lblName2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName2.setText("House Id");

        lblName3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName3.setText("Community");

        lblName4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName4.setText("City");

        lblName5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName5.setText("State");

        lblName6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName6.setText("Country");

        lblName7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName7.setText("Zipcode");

        community.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblName2)
                    .addComponent(lblName)
                    .addComponent(lblName3)
                    .addComponent(lblName5)
                    .addComponent(lblName6)
                    .addComponent(lblName7)
                    .addComponent(lblName4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(country, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(state, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(houseno, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(houseid, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(community, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zipcode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(update, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(226, 226, 226))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(titlePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(titlePatient)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(houseno, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(houseid, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName2)
                            .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(community, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName4))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName6)
                            .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName7)
                            .addComponent(zipcode, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(835, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1165, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1376, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here:
         int flag =1;
        String s1 = houseno.getText();
         if(s1.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"House No. cannot be empty");
            return;
        }
                        
        String ss2 = houseid.getText();
        if(ss2.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"House Id cannot be empty or contain alphabets");
            return;
        }
        char[] chars1 = ss2.toCharArray();
        for(char c: chars1)
        {
            if(Character.isAlphabetic(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"House Id cannot be empty or contain alphabets");
               return;
            }
        }
        int s2 = Integer.parseInt(ss2);
        for(Houses cc : ho.getHo()){
            
            if(s2 == (cc.getHouseId())){
                flag=0;
                JOptionPane.showMessageDialog(this,"House Id already exists, please try again");
                return;
            }
            
        }
        
        
        
        String s3 = (String)community.getSelectedItem();
        
        if(s3.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Community cannot be empty or have numbers");
            return;
        }
        char[] chars3 = s3.toCharArray();
        for(char c: chars3){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Community cannot be empty or have numbers");
                return;
                
            }
        }
        
        String s4 = (String)city.getSelectedItem();
        
        if(s4.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"City cannot be empty or have numbers");
            return;
        }
        char[] chars4 = s4.toCharArray();
        for(char c: chars4){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"City cannot be empty or have numbers");
                return;
                
            }
        }
        
        String s5 = (String)state.getSelectedItem();
        if(s5.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
        }
        char[] chars5 = s5.toCharArray();
        for(char c: chars5){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
                return;
                
            }
        }
        
        String s6 = (String)country.getSelectedItem();
        
        if(s6.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
            return;
        }
        char[] chars6 = s6.toCharArray();
        for(char c: chars6){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
                return;
                
            }
        }
       String ss7 = (String)zipcode.getSelectedItem();
        
        if(ss7.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Zipcode cannot be empty or have alphabets");
            return;
        }
        char[] chars7 = ss7.toCharArray();
        for(char c: chars7){
            if(Character.isAlphabetic(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Zipcode cannot be empty or have alphabets");
                return;
                
            }
        }
        int s7 = Integer.parseInt(ss7);

       if(flag==1){
           
           Houses hh = ho.addNewHo();
           hh.setHouseadd(s1);
           hh.setHouseId(s2);
           hh.setCommunityName(s3);
           hh.setCityName(s4);
           hh.setCountry(s5);
           hh.setState(s6);
           hh.setZipcode(s7);
           
           JOptionPane.showMessageDialog(this,"House Profile created successfully");
           populateTable();
           
       }
       
       houseno.setText("");
       houseid.setText("");
       zipcode.setSelectedItem("select");
       city.setSelectedItem("select");
       country.setSelectedItem("select");
       state.setSelectedItem("select");
       zipcode.setSelectedItem("select");
       community.setSelectedItem("select");
                                   

          
    }//GEN-LAST:event_createActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        
        int row = tableho.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this,"Please select row to delete");
            return;

        }
        DefaultTableModel model = (DefaultTableModel) tableho.getModel();
        Houses selectedep = (Houses)model.getValueAt(row, 0);
        
        houseno.setText(String.valueOf(selectedep.getHouseadd()));
        houseid.setText(String.valueOf(selectedep.getHouseId()));
        zipcode.setSelectedItem(String.valueOf(selectedep.getZipcode()));
        city.setSelectedItem(String.valueOf(selectedep.getCityName()));
        state.setSelectedItem(String.valueOf(selectedep.getState()));
        community.setSelectedItem(String.valueOf(selectedep.getCommunityName()));
        country.setSelectedItem(String.valueOf(selectedep.getCountry()));
    }//GEN-LAST:event_viewActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
         int row = tableho.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this,"Please select row to delete");
            return;

        }
        DefaultTableModel model = (DefaultTableModel) tableho.getModel();
        Houses selectedep = (Houses)model.getValueAt(row, 0);
        ho.deletehou(selectedep);
        
         int flag =1;
        String s1 = houseno.getText();
         if(s1.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"House No. cannot be empty");
            return;
        }
                        
        String ss2 = houseid.getText();
        if(ss2.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"House Id cannot be empty or contain alphabets");
            return;
        }
        char[] chars1 = ss2.toCharArray();
        for(char c: chars1)
        {
            if(Character.isAlphabetic(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"House Id cannot be empty or contain alphabets");
               return;
            }
        }
        
       
        
        int s2 = Integer.parseInt(ss2);
        for(Houses cc : ho.getHo()){
            
            if(s2 == (cc.getHouseId())){
                flag=0;
                JOptionPane.showMessageDialog(this,"House Id already exists, please try again");
                return;
            }
            
        }
        
        String s3 = (String)community.getSelectedItem();
        
        if(s3.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Community cannot be empty or have numbers");
            return;
        }
        char[] chars3 = s3.toCharArray();
        for(char c: chars3){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Community cannot be empty or have numbers");
                return;
                
            }
        }
        
        String s4 = (String)city.getSelectedItem();
        
        if(s4.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"City cannot be empty or have numbers");
            return;
        }
        char[] chars4 = s4.toCharArray();
        for(char c: chars4){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"City cannot be empty or have numbers");
                return;
                
            }
        }
        
        String s5 = (String)state.getSelectedItem();
        
        if(s5.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
        }
        char[] chars5 = s5.toCharArray();
        for(char c: chars5){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
                return;
                
            }
        }
        
        String s6 = (String)country.getSelectedItem();
        
        if(s6.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
            return;
        }
        char[] chars6 = s6.toCharArray();
        for(char c: chars6){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
                return;
                
            }
        }
       String ss7 = (String)zipcode.getSelectedItem();
        
        if(ss7.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Zipcode cannot be empty or have alphabets");
            return;
        }
        char[] chars7 = ss7.toCharArray();
        for(char c: chars7){
            if(Character.isAlphabetic(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Zipcode cannot be empty or have alphabets");
                return;
                
            }
        }
        int s7 = Integer.parseInt(ss7);

       if(flag==1){
           
           Houses hh = ho.addNewHo();
           hh.setHouseadd(s1);
           hh.setHouseId(s2);
           hh.setCommunityName(s3);
           hh.setCityName(s4);
           hh.setCountry(s5);
           hh.setState(s6);
           hh.setZipcode(s7);
           
           JOptionPane.showMessageDialog(this,"House Profile updated successfully");
           populateTable();
           
       }
       
       houseno.setText("");
       houseid.setText("");
       zipcode.setSelectedItem("select");
       city.setSelectedItem("select");
       country.setSelectedItem("select");
       state.setSelectedItem("select");
       zipcode.setSelectedItem("select");
       community.setSelectedItem("select");
       
    }//GEN-LAST:event_updateActionPerformed

    private void communityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_communityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> city;
    private javax.swing.JComboBox<String> community;
    private javax.swing.JComboBox<String> country;
    private javax.swing.JButton create;
    private javax.swing.JTextField houseid;
    private javax.swing.JTextField houseno;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName2;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblName4;
    private javax.swing.JLabel lblName5;
    private javax.swing.JLabel lblName6;
    private javax.swing.JLabel lblName7;
    private javax.swing.JComboBox<String> state;
    private javax.swing.JTable tableho;
    private javax.swing.JLabel titlePatient;
    private javax.swing.JButton update;
    private javax.swing.JButton view;
    private javax.swing.JComboBox<String> zipcode;
    // End of variables declaration//GEN-END:variables

private void populateTable() {
          DefaultTableModel model = (DefaultTableModel) tableho.getModel();
          model.setRowCount(0);
        
        for (Houses ep:ho.getHo()){
            
            Object[] row = new Object[2];
            row[0] = ep;
            row[1] = ep.getHouseId();
            
            model.addRow(row);
            
        }
        
    }
private void populateCity(){
     String[] cc = c.cityArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     city.setModel(c);
     
 
}
private void populateCountry(){
     String[] cc = c.countryArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     country.setModel(c);
     
 }
private void populateState(){
     String[] cc = c.stateArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     state.setModel(c);
     
 }
private void populateCommunity(){
     String[] cc = co.communityArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     community.setModel(c);
     
 }
private void populateZipcode(){
     String[] cc = co.zipcodeArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     zipcode.setModel(c);
     
 }

}
