/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package communityAdmin;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.cityArrayList;

/**
 *
 * @author DELL
 */
public class cityCommunityAdmin extends javax.swing.JPanel {

    /**
     * Creates new form cityCommunityAdmin
     */
    cityArrayList c;
    public cityCommunityAdmin(cityArrayList c) {
        initComponents();
        this.c=c;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        titlePatient = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablecity = new javax.swing.JTable();
        cityid = new javax.swing.JTextField();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        view = new javax.swing.JButton();
        cityname = new javax.swing.JTextField();
        country = new javax.swing.JTextField();
        state = new javax.swing.JTextField();
        lblName1 = new javax.swing.JLabel();
        lblName2 = new javax.swing.JLabel();
        jjjj = new javax.swing.JLabel();

        titlePatient.setFont(new java.awt.Font("Sylfaen", 3, 36)); // NOI18N
        titlePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlePatient.setText("City Details");
        titlePatient.setToolTipText("");

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName.setText("City Name");

        tablecity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "City", "City Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablecity);

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        lblName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName1.setText("City Id");

        lblName2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName2.setText("Country");

        jjjj.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jjjj.setText("State");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblName1)
                            .addComponent(lblName)
                            .addComponent(lblName2)
                            .addComponent(jjjj))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cityname, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityid, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(titlePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 283, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(titlePatient)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(cityname, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityid, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName1)
                            .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName2))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jjjj)
                            .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(843, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1182, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1367, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here:
        int flag =1;
        String s1 = cityname.getText();
        if(s1.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"City Name cannot be empty or contain number");
            return;
        }
        
        char[] chars = s1.toCharArray();
        for(char c : chars){
            if (Character.isDigit(c)){
                flag =0;
                JOptionPane.showMessageDialog(this,"City Name cannot be empty or contain number");
                return;
            }
        }
        
        String ss2 = cityid.getText();
        if(ss2.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"City Id cannot be empty or contain alphabets");
            return;
        }
       
        char[] chars1 = ss2.toCharArray();
        for(char c: chars1)
        {
            if(Character.isAlphabetic(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"City Id cannot be empty or contain alphabets");
               return;
            }
        }
        int s2 = Integer.parseInt(ss2);
        for (City epp:c.getC()){
            if (s2 == (epp.getCityId())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
            }
        }
       
        
        
        
        String s3 = country.getText();
        
        if(s3.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
            return;
        }
        char[] chars2 = s3.toCharArray();
        for(char c: chars2){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
                return;
                
            }
        }
       String s4 = state.getText();
       
       if(s4.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
        }
       char[] chars3 = s4.toCharArray();
       for(char c: chars3){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
               
           }
       }
       
      
       
       if(flag==1){
           
           City cc = c.addNewC();
           cc.setCityName(s1);
           cc.setCityId(s2);
           cc.setCountry(s3);
           cc.setState(s4);
           
           JOptionPane.showMessageDialog(this,"City Profile created successfully");
           populateTable();
           
       }
       
       cityname.setText("");
       cityid.setText("");
       country.setText("");
       state.setText("");
    }//GEN-LAST:event_createActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        int row = tablecity.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this,"Please select row to delete");
            return;

        }
        DefaultTableModel model = (DefaultTableModel) tablecity.getModel();
        City selectedep = (City)model.getValueAt(row, 0);
        
        cityname.setText(String.valueOf(selectedep.getCityName()));
        cityid.setText(String.valueOf(selectedep.getCityId()));
        country.setText(String.valueOf(selectedep.getCountry()));
        state.setText(String.valueOf(selectedep.getState()));
    }//GEN-LAST:event_viewActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        int row = tablecity.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this,"Please select row to delete");
            return;

        }
        DefaultTableModel model = (DefaultTableModel) tablecity.getModel();
        City selectedep = (City)model.getValueAt(row, 0);
        c.deleteC(selectedep);
       int flag =1;
        String s1 = cityname.getText();
        if(s1.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"City Name cannot be empty or contain number");
            return;
        }
        
        char[] chars = s1.toCharArray();
        for(char c : chars){
            if (Character.isDigit(c)){
                flag =0;
                JOptionPane.showMessageDialog(this,"City Name cannot be empty or contain number");
                return;
            }
        }
        
        String ss2 = cityid.getText();
        if(ss2.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"City Id cannot be empty or contain alphabets");
            return;
        }
        char[] chars1 = ss2.toCharArray();
        for(char c: chars1)
        {
            if(Character.isAlphabetic(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"City Id cannot be empty or contain alphabets");
               return;
            }
        }
        
                
        int s2 = Integer.parseInt(ss2);
        for (City epp:c.getC()){
            if (s2 == (epp.getCityId())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
            }
        }
        
        String s3 = country.getText();
        
        if(s3.equals("")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
            return;
        }
        char[] chars2 = s3.toCharArray();
        for(char c: chars2){
            if(Character.isDigit(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
                return;
                
            }
        }
       String s4 = state.getText();
       
       if(s4.equals("")){
           flag=0;
           JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
        }
       char[] chars3 = s4.toCharArray();
       for(char c: chars3){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
               
           }
       }
       
      
       
       if(flag==1){
           
           City cc = c.addNewC();
           cc.setCityName(s1);
           cc.setCityId(s2);
           cc.setCountry(s3);
           cc.setState(s4);
           
           JOptionPane.showMessageDialog(this,"City Profile updated successfully");
           populateTable();
           
       }
       
       cityname.setText("");
       cityid.setText("");
       country.setText("");
       state.setText(""); 
    }//GEN-LAST:event_updateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cityid;
    private javax.swing.JTextField cityname;
    private javax.swing.JTextField country;
    private javax.swing.JButton create;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jjjj;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName2;
    private javax.swing.JTextField state;
    private javax.swing.JTable tablecity;
    private javax.swing.JLabel titlePatient;
    private javax.swing.JButton update;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables

private void populateTable() {
          DefaultTableModel model = (DefaultTableModel) tablecity.getModel();
          model.setRowCount(0);
        
        for (City ep:c.getC()){
            
            Object[] row = new Object[2];
            row[0] = ep;
            row[1] = ep.getCityId();
            
            model.addRow(row);
            
        }
        
    }
}
