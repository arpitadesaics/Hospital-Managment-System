/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package patient;

//import java.text.SimpleDateFormat;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.doctorArrayList;
import model.encounter;
import model.encounterArrayList;
import model.hospitalArrayList;
import model.patientArrayList;

/**
 *
 * @author DELL
 */
public class encounterPatient extends javax.swing.JPanel {

    /**
     * Creates new form encounterPatient
     */
    encounterArrayList e;
    patientArrayList p;
    doctorArrayList d;
    hospitalArrayList h;
    public encounterPatient(patientArrayList p,doctorArrayList d,hospitalArrayList h,encounterArrayList e) {
        initComponents();
        this.e=e;
        this.p=p;
        this.h=h;
        this.d=d;
        //populateTable();
        populatePatientName();
        //populatePatientUsername();
        populateDoctorName();
        populateDoctorUsername();
        populateHospitalname();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titlePatient = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        encounterid = new javax.swing.JTextField();
        lblName3 = new javax.swing.JLabel();
        lblName5 = new javax.swing.JLabel();
        lblName6 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        lblName7 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        lblName8 = new javax.swing.JLabel();
        lblName9 = new javax.swing.JLabel();
        lblName10 = new javax.swing.JLabel();
        patientname = new javax.swing.JComboBox<>();
        hospitalname = new javax.swing.JComboBox<>();
        doctorname = new javax.swing.JComboBox<>();
        doctorusername = new javax.swing.JComboBox<>();
        roomno = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablepe = new javax.swing.JTable();
        view = new javax.swing.JButton();
        patientusername = new javax.swing.JTextField();
        encounterdate = new javax.swing.JTextField();
        time = new javax.swing.JTextField();

        titlePatient.setFont(new java.awt.Font("Sylfaen", 3, 36)); // NOI18N
        titlePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlePatient.setText("Encounter Details");
        titlePatient.setToolTipText("");

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName.setText("Encounter Id");

        lblName3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName3.setText("Hospital Name");

        lblName5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName5.setText("Doctor Username");

        lblName6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName6.setText("Doctor Name");

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        lblName7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName7.setText("Patient Username");

        lblName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName1.setText("Patient Name");

        lblName8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName8.setText("Date");

        lblName9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName9.setText("Time");

        lblName10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName10.setText("Room No");

        hospitalname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalnameActionPerformed(evt);
            }
        });

        doctorusername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorusernameActionPerformed(evt);
            }
        });

        tablepe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor Name", "Encounter Id", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablepe);

        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(titlePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1366, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(222, 222, 222)
                        .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(lblName3)
                                    .addGap(32, 32, 32)
                                    .addComponent(hospitalname, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblName9, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblName10, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(roomno, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(1, 1, 1)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblName7)
                                        .addComponent(lblName1)
                                        .addComponent(lblName5))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblName6, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblName8, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblName, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(encounterid, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorname, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(patientusername, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(patientname, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(encounterdate, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(doctorusername, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(titlePatient)
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(encounterid, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientname, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName7)
                            .addComponent(patientusername, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hospitalname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName3))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorusername, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName5))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName8)
                            .addComponent(encounterdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName9)
                            .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomno, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName10))))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(743, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
       int row = tablepe.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablepe.getModel();
        encounter selectedep = (encounter)model.getValueAt(row, 0);
        e.deleteE(selectedep);
        
        int flag =1;
         String ss1 = encounterid.getText();
        
         if(ss1.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
           return;
        }
        char[] chars = ss1.toCharArray();
        for(char c : chars)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s1 = Integer.parseInt(ss1);
        
        String s2 = (String)patientname.getSelectedItem(); 
        if(s2.equals("select"))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars2 = s2.toCharArray();
        for(char c : chars2)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
        String s3 = patientusername.getText(); 
        if(s3.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Username cannot be empty");
           return;                     
        }   
        String s4 = (String)hospitalname.getSelectedItem(); 
        if(s4.equals("select"))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars4 = s4.toCharArray();
        for(char c : chars4)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
        String s5 = (String)doctorname.getSelectedItem(); 
        if(s5.equals("select"))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars5 = s5.toCharArray();
        for(char c : chars5)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
         String s6 = (String)doctorusername.getSelectedItem(); 
        if(s6.equals("select"))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Username cannot be empty");
           return;                     
        }
        
       String s7 = encounterdate.getText();
        if(s7.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Please enter date");
           return;                     
        }
         if (s7.length()<10){
             flag=0;
            JOptionPane.showMessageDialog(this,"Please enter correct date in format mm/dd/yyyy" );
            return;
        }
        
        StringBuffer sBuffer = new StringBuffer(s7);
        String mm;
        String dd;
        String yr;

        mm = sBuffer.substring(0,2);
        dd = sBuffer.substring(3,5);
        yr = sBuffer.substring(6,10);

        
        if(mm.matches("0[1-9]|1[0-2]") && dd.matches("0[1-9]|[12][0-9]|3[01]") && yr.matches("(19|20)\\d\\d"))
        {
          
        }
        else
        {
            flag=0;
         JOptionPane.showMessageDialog(this, "Please enter correct date in format mm/dd/yyyy");
         return;
        }
        
        String s8 = time.getText();
        if(s8.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Please enter time");
           return;                     
        }
         if (s8.length()<5){
             flag=0;
            JOptionPane.showMessageDialog(this,"Please enter correct time in format hh:mm" );
            return;
        }
        
//        StringBuffer sBuffer1 = new StringBuffer(s8);
//        String hh;
//        String mm1;
//        
//        hh = sBuffer1.substring(0,2);
//        mm1 = sBuffer1.substring(3,5);
//        
//
//        
//        if(hh.matches("0[0-2]|1[0-9]") && mm1.matches("0[0-6]|1[0-9]"))
//        {
//          
//        }
//        else
//        {
//            flag=0;
//         JOptionPane.showMessageDialog(this, "Please enter correct time in format hh:mm");
//         return;
//        }
//        
        
        String s9 = roomno.getText();
        if(s9.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Room No cannot be empty");
           return;                     
        }
        
        if(flag==1)
        {
            encounter en = e.addNewE();
            en.setEncounterNo(s1);
            en.setPatientName(s2);
            en.setPatientUsername(s3);
            en.setHospitalName(s4);
            en.setDoctorName(s5);
            en.setDoctorUsername(s6);
            en.setEncounterDate(s7);
            en.setEncounterTime(s8);
            en.setRoomNo(s9);
            
            JOptionPane.showMessageDialog(this,"Encounter updated successfully"); 
          
           populateTable();
                       
        }
        
        encounterid.setText("");
        patientname.setSelectedItem("select");
        patientusername.setText("");
        hospitalname.setSelectedItem("select");
        doctorname.setSelectedItem("select");
        doctorusername.setSelectedItem("select");
        encounterdate.setText("");
        time.setText("");
        roomno.setText("");

    }//GEN-LAST:event_updateActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        
        int row = tablepe.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablepe.getModel();
        encounter selectedep = (encounter)model.getValueAt(row, 0);
        
                encounterid.setText(String.valueOf(selectedep.getEncounterNo()));
                patientname.setSelectedItem(String.valueOf(selectedep.getPatientName()));
                patientusername.setText(String.valueOf(selectedep.getPatientUsername()));
                hospitalname.setSelectedItem(String.valueOf(selectedep.getHospitalName()));
                doctorname.setSelectedItem(String.valueOf(selectedep.getDoctorName()));
                doctorusername.setSelectedItem(String.valueOf(selectedep.getDoctorUsername()));
                encounterdate.setText(String.valueOf(selectedep.getEncounterDate()));
                time.setText(String.valueOf(selectedep.getEncounterTime()));
                roomno.setText(String.valueOf(selectedep.getRoomNo()));
    }//GEN-LAST:event_viewActionPerformed

    private void doctorusernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorusernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorusernameActionPerformed

    private void hospitalnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospitalnameActionPerformed

    private void roomno2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomno2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomno2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox<String> doctorname;
    public static javax.swing.JComboBox<String> doctorusername;
    public static javax.swing.JTextField encounterdate;
    public static javax.swing.JTextField encounterid;
    public static javax.swing.JComboBox<String> hospitalname;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName10;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblName5;
    private javax.swing.JLabel lblName6;
    private javax.swing.JLabel lblName7;
    private javax.swing.JLabel lblName8;
    private javax.swing.JLabel lblName9;
    public static javax.swing.JComboBox<String> patientname;
    public static javax.swing.JTextField patientusername;
    public static javax.swing.JTextField roomno;
    public static javax.swing.JTable tablepe;
    public static javax.swing.JTextField time;
    private javax.swing.JLabel titlePatient;
    private javax.swing.JButton update;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables

public void populateTable() {
            
          DefaultTableModel model = (DefaultTableModel) tablepe.getModel();
          model.setRowCount(0);         
           
        for (encounter ep:e.getE()){ 
            if(patientusername.getText().equals(ep.getPatientUsername()))
                {
            
                        Object[] row = new Object[3];
                        row[0] = ep;
                        row[1] = ep.getEncounterNo();
                        row[2] = ep.getEncounterDate();
                                      
                        
                     
             model.addRow(row);
                }
        }
}     
   
        
   
private void populatePatientName(){
     String[] cc = p.patientNameArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     patientname.setModel(c);
     
 }
//private void populatePatientUsername(){
//     String[] cc = p.patientUsernameArray();
//     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
//     patientusername.setModel(c);
//     
// }
private void populateDoctorName(){
     String[] cc = d.doctorNameArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     doctorname.setModel(c);
     
 }
private void populateDoctorUsername(){
     String[] cc = d.doctorUsernameArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     doctorusername.setModel(c);
     
 }
    
 private void populateHospitalname(){
     String[] cc = h.hospitalnameArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     hospitalname.setModel(c);
     
 }
}
