/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package systemAdmin;

import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.patientArrayList;
import java.lang.String;
import javax.swing.DefaultComboBoxModel;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import model.cityArrayList;
import model.communityArrayList;
import model.houseArrayList;
import patient.proPatient;

/**
 *
 * @author DELL
 */
public class patientSysAdmin extends javax.swing.JPanel {
    

    /**
     * Creates new form patientSysAdmin
     */
    patientArrayList p;
    cityArrayList c;
    communityArrayList co;
    houseArrayList ho;
    public patientSysAdmin(patientArrayList p,cityArrayList c,communityArrayList co,houseArrayList ho) {
        initComponents();
        this.p = p;
        this.c=c;
        this.co=co;
        this.ho=ho;
        populateTable();
        populateCity();
        populateCountry();
        populateState();
        populateCommunity();
        populateZipcode();
        populateHouse();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
            
//    int row = tablep.getSelectedRow();
      
    
//        DefaultTableModel model = (DefaultTableModel) tablep.getModel();
//        Patient selectedep = (Patient)model.getValueAt(row, 0);
//        String A1 = String.valueOf(selectedep.getName());
//        String A2 = String.valueOf(selectedep.getPatientId());
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePatient = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablep = new javax.swing.JTable();
        name = new javax.swing.JTextField();
        cellphone = new javax.swing.JTextField();
        username = new javax.swing.JTextField();
        lblName1 = new javax.swing.JLabel();
        lblName2 = new javax.swing.JLabel();
        lblName3 = new javax.swing.JLabel();
        lblName4 = new javax.swing.JLabel();
        lblName5 = new javax.swing.JLabel();
        lblName6 = new javax.swing.JLabel();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        view = new javax.swing.JButton();
        lblName7 = new javax.swing.JLabel();
        gender = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        search = new javax.swing.JTextArea();
        age = new javax.swing.JTextField();
        patientid = new javax.swing.JTextField();
        lblName8 = new javax.swing.JLabel();
        lblName9 = new javax.swing.JLabel();
        pass = new javax.swing.JTextField();
        zipcodelabel = new javax.swing.JLabel();
        state2 = new javax.swing.JLabel();
        countrylabel = new javax.swing.JLabel();
        residence = new javax.swing.JComboBox<>();
        community = new javax.swing.JComboBox<>();
        zipcode = new javax.swing.JComboBox<>();
        state = new javax.swing.JComboBox<>();
        city = new javax.swing.JComboBox<>();
        country = new javax.swing.JComboBox<>();

        titlePatient.setFont(new java.awt.Font("Sylfaen", 3, 36)); // NOI18N
        titlePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlePatient.setText("                            Patient Details");
        titlePatient.setToolTipText("");

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName.setText("Name");

        tablep.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Patient ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablep);

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });

        lblName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName1.setText("Community");

        lblName2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName2.setText("Patient Id");

        lblName3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName3.setText("City");

        lblName4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName4.setText("Cell Phone");

        lblName5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName5.setText("Username");

        lblName6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName6.setText("Residence");

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        lblName7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName7.setText("Password");

        gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select", "Male", "Female", "Other" }));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Search");

        search.setColumns(20);
        search.setRows(5);
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(search);

        lblName8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName8.setText("Age");

        lblName9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName9.setText("Gender");

        pass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passActionPerformed(evt);
            }
        });

        zipcodelabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        zipcodelabel.setText("Zipcode");

        state2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        state2.setText("State");

        countrylabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        countrylabel.setText("Country");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblName5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblName4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblName7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblName8)
                        .addComponent(lblName9))
                    .addComponent(lblName, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cellphone, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientid, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblName3)
                                .addGap(18, 18, 18)
                                .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblName1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(community, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblName6)
                                .addGap(18, 18, 18)
                                .addComponent(residence, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(state2)
                                    .addComponent(countrylabel)
                                    .addComponent(zipcodelabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(zipcode, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(102, 102, 102))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel1)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titlePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(titlePatient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(15, 15, 15)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName)
                            .addComponent(residence, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName8)
                            .addComponent(community, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(update, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblName9)
                                .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblName3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblName5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblName7)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientid, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblName2)
                                    .addComponent(state, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(state2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(country, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(countrylabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(zipcode, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(zipcodelabel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cellphone, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName4))
                        .addGap(130, 130, 130)))
                .addGap(666, 666, 666))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
          int row = tablep.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(this,"Please select row to delete");
            return;

        }

        DefaultTableModel model = (DefaultTableModel) tablep.getModel();
        Patient selectedep = (Patient)model.getValueAt(row, 0);

        p.deleteP(selectedep);
        JOptionPane.showMessageDialog(this,"Patient Profile deleted");

        populateTable();
        
    }//GEN-LAST:event_deleteActionPerformed

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here:
        
       
        int flag =1;
        String s1 = name.getText(); 
        if(s1.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars = s1.toCharArray();
        for(char c : chars)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
        
        
        String ss2 = age.getText();             
        
        if(ss2.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet"); 
           return;
        }
        char[] chars1 = ss2.toCharArray();
        for(char c : chars1)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s2 = Integer.parseInt(ss2);
          
        String s3 = (String)gender.getSelectedItem();
        if(s3.equals("select"))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Gender field cannot be empty");  
           return;
        }
        String ss4 = patientid.getText();
        
         if(ss4.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
           return;
        }
        char[] chars3 = ss4.toCharArray();
        for(char c : chars3)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s4 = Integer.parseInt(ss4);
        for (Patient epp:p.getP()){
            if (s4 == (epp.getPatientId())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
            }
        }
        
        String s5 = username.getText();
        if(s5.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Username field cannot be empty");
           return;                     
        } 
         for (Patient ep:p.getP()){
            if (s5.equals(ep.getUsername())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"Username already exists, please try again");
            }
         }
            
            String s6 = pass.getText();
             if(s6.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Password field cannot be empty");
           return;                     
        } 
         for (Patient ep1:p.getP()){
            if (s6.equals(ep1.getPassword())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"Password already exists, please try again");
            }
        
        
        } 

        String ss7 =  cellphone.getText();
        
        if(ss7.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
           return;
         }
        if(ss7.length()!=10)
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Cell phone number must be 10 digits");  
            return;
        }
        char[] chars5 = ss7.toCharArray();
        for(char c : chars5)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
               return;   
            }
        }
       
         
        long s7 = Long.parseLong(ss7);
         for (Patient epp:p.getP()){
            if (s7 == (epp.getCellPhone())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"Phone Number already exists, please fill the details again");
            }
         }
        
        String s8 = (String)residence.getSelectedItem();
       
       if(s8.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Residence cannot be empty");
            return;
        }
       
       String s9 = (String)community.getSelectedItem();
       
       if(s9.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Community cannot be empty or have numbers");
            return;
        }
       char[] chars7 = s9.toCharArray();
       for(char c: chars7){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"Community cannot be empty or have numbers");
            return;
               
           }
       }
       String s10 = (String)city.getSelectedItem();
       
       if(s10.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"City cannot be empty or have numbers");
            return;
        }
       char[] chars8 = s10.toCharArray();
       for(char c: chars8){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"City cannot be empty or have numbers");
            return;
               
           }
       }
       String s11 = (String)state.getSelectedItem();
       
       if(s11.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
        }
       char[] chars9 = s11.toCharArray();
       for(char c: chars9){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
               
           }
       }
       String s12 = (String)country.getSelectedItem();
       
       if(s12.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
            return;
        }
       char[] chars10 = s12.toCharArray();
       for(char c: chars10){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
            return;
               
           }
       }
       String ss13 = (String)zipcode.getSelectedItem();
        
        if(ss13.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Zipcode cannot be empty or have alphabets");
            return;
        }
        char[] chars12 = ss13.toCharArray();
        for(char c: chars12){
            if(Character.isAlphabetic(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Zipcode cannot be empty or have alphabets");
                return;
                
            }
        }
        long s13 = Long.parseLong(ss13);  
       
        if(flag == 1)
        {
        Patient pp = p.addNewP();
        pp.setName(s1);
        pp.setAge(s2);
        pp.setGender(s3);
        pp.setPatientId(s4);
        pp.setUsername(s5);
        pp.setPassword(s6);
        pp.setCellPhone(s7);
        pp.setResidence(s8);
        pp.setCommunity(s9);
        pp.setCity(s10);
        pp.setState(s11);
        pp.setCountry(s12);              
        pp.setZipcode(s13);
         
         
        JOptionPane.showMessageDialog(this,"Patient Profile created successfully"); 
          
           populateTable();
           
        
           
          
        }
        name.setText("");
        age.setText("");
        gender.setSelectedItem("select");
        residence.setSelectedItem("select");
        cellphone.setText("");
        community.setSelectedItem("select");
        zipcode.setSelectedItem("select");
        patientid.setText("");
        username.setText("");
        pass.setText(""); 
        country.setSelectedItem("select");
        state.setSelectedItem("select");
        city.setSelectedItem("select");          
                   
       
    }//GEN-LAST:event_createActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        
        int row = tablep.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablep.getModel();
        Patient selectedep = (Patient)model.getValueAt(row, 0);
        p.deleteP(selectedep);
        int flag =1;
        String s1 = name.getText(); 
        if(s1.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
           return;                     
        }   
        char[] chars = s1.toCharArray();
        for(char c : chars)
        {
            if(Character.isDigit(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
               return;   
            }
        }
        
        
        String ss2 = age.getText();             
        
        if(ss2.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet"); 
           return;
        }
        char[] chars1 = ss2.toCharArray();
        for(char c : chars1)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Age field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s2 = Integer.parseInt(ss2);
          
        String s3 = (String)gender.getSelectedItem();
        if(s3.equals("select"))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Gender field cannot be empty");  
           return;
        }
        String ss4 = patientid.getText();
        
         if(ss4.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
           return;
        }
        char[] chars3 = ss4.toCharArray();
        for(char c : chars3)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet"); 
               return;   
            }
        }
        int s4 = Integer.parseInt(ss4);
        for (Patient epp:p.getP()){
            if (s4 == (epp.getPatientId())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"ID already exists, please fill the details again");
            }
        }
        
        String s5 = username.getText();
        if(s5.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Username field cannot be empty");
           return;                     
        } 
         for (Patient ep:p.getP()){
            if (s5.equals(ep.getUsername())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"Username already exists, please try again");
            }
         }
            
            String s6 = pass.getText();
             if(s6.equals(""))
        {
           flag=0;
           JOptionPane.showMessageDialog(this,"Password field cannot be empty");
           return;                     
        } 
         for (Patient ep1:p.getP()){
            if (s6.equals(ep1.getPassword())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"Password already exists, please try again");
            }
        
        
        } 

        String ss7 =  cellphone.getText();
        
        if(ss7.equals(""))
        {
            flag=0;
           JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
           return;
         }
        if(ss7.length()!=10)
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Cell phone number must be 10 digits");  
            return;
        }
        char[] chars5 = ss7.toCharArray();
        for(char c : chars5)
        {
            if(Character.isAlphabetic(c))
            {
               flag=0;
               JOptionPane.showMessageDialog(this,"Cell phone number field cannot be empty or contain alphabet"); 
               return;   
            }
        }
       
         
        long s7 = Long.parseLong(ss7);
         for (Patient epp:p.getP()){
            if (s7 == (epp.getCellPhone())){
               flag=0;                
             JOptionPane.showMessageDialog(this,"Phone Number already exists, please fill the details again");
            }
         }
        
        String s8 = (String)residence.getSelectedItem();
       
       if(s8.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Residence cannot be empty");
            return;
        }
       
        
       String s9 = (String)community.getSelectedItem();
       
       if(s9.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Community cannot be empty or have numbers");
            return;
        }
       char[] chars7 = s9.toCharArray();
       for(char c: chars7){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"Community cannot be empty or have numbers");
            return;
               
           }
       }
       String s10 = (String)city.getSelectedItem();
       
       if(s10.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"City cannot be empty or have numbers");
            return;
        }
       char[] chars8 = s10.toCharArray();
       for(char c: chars8){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"City cannot be empty or have numbers");
            return;
               
           }
       }
       String s11 = (String)state.getSelectedItem();
       
       if(s11.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
        }
       char[] chars9 = s11.toCharArray();
       for(char c: chars9){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"State cannot be empty or have numbers");
            return;
               
           }
       }
       String s12 = (String)country.getSelectedItem();
       
       if(s12.equals("select")){
           flag=0;
           JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
            return;
        }
       char[] chars10 = s12.toCharArray();
       for(char c: chars10){
           if(Character.isDigit(c)){
               flag=0;
               JOptionPane.showMessageDialog(this,"Country cannot be empty or have numbers");
            return;
               
           }
       }
       String ss13 = (String)zipcode.getSelectedItem();
        
        if(ss13.equals("select")){
            flag=0;
            JOptionPane.showMessageDialog(this,"Zipcode cannot be empty or have alphabets");
            return;
        }
        char[] chars12 = ss13.toCharArray();
        for(char c: chars12){
            if(Character.isAlphabetic(c)){
                flag=0;
                JOptionPane.showMessageDialog(this,"Zipcode cannot be empty or have alphabets");
                return;
                
            }
        }
        long s13 = Long.parseLong(ss13);  
       
        if(flag == 1)
        {
        Patient pp = p.addNewP();
        pp.setName(s1);
        pp.setAge(s2);
        pp.setGender(s3);
        pp.setPatientId(s4);
        pp.setUsername(s5);
        pp.setPassword(s6);
        pp.setCellPhone(s7);
        pp.setResidence(s8);
        pp.setCommunity(s9);
        pp.setCity(s10);
        pp.setState(s11);
        pp.setCountry(s12);              
        pp.setZipcode(s13);
         
         
        JOptionPane.showMessageDialog(this,"Patient Profile updated successfully"); 
          
           populateTable();
           
        
           
          
        }
        name.setText("");
        age.setText("");
        gender.setSelectedItem("select");
        residence.setSelectedItem("select");
        cellphone.setText("");
        community.setSelectedItem("select");
        zipcode.setSelectedItem("select");
        patientid.setText("");
        username.setText("");
        pass.setText(""); 
        country.setSelectedItem("select");
        state.setSelectedItem("select");
        city.setSelectedItem("select");          
                   
        
             
        
    }//GEN-LAST:event_updateActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        int row = tablep.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablep.getModel();
        Patient selectedep = (Patient)model.getValueAt(row, 0);
        
                name.setText(String.valueOf(selectedep.getName()));
                age.setText(String.valueOf(selectedep.getAge()));
                gender.setSelectedItem(String.valueOf(selectedep.getGender()));
                residence.setSelectedItem(String.valueOf(selectedep.getResidence()));
                community.setSelectedItem(String.valueOf(selectedep.getCommunity()));
                patientid.setText(String.valueOf(selectedep.getPatientId()));
                zipcode.setSelectedItem(String.valueOf(selectedep.getZipcode()));
                cellphone.setText(String.valueOf(selectedep.getCellPhone()));
                username.setText(String.valueOf(selectedep.getUsername()));
                pass.setText(String.valueOf(selectedep.getPassword()));
                state.setSelectedItem(String.valueOf(selectedep.getState()));
                country.setSelectedItem(String.valueOf(selectedep.getCountry()));
                city.setSelectedItem(String.valueOf(selectedep.getCity()));
               
                
                
    }//GEN-LAST:event_viewActionPerformed

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tablep.getModel();
        String value = search.getText();
        TableRowSorter<DefaultTableModel> key = new TableRowSorter<DefaultTableModel>(model);
        tablep.setRowSorter(key);
        key.setRowFilter(RowFilter.regexFilter(value));
    }//GEN-LAST:event_searchKeyReleased

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void passActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passActionPerformed
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField age;
    private javax.swing.JTextField cellphone;
    private javax.swing.JComboBox<String> city;
    private javax.swing.JComboBox<String> community;
    private javax.swing.JComboBox<String> country;
    private javax.swing.JLabel countrylabel;
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JComboBox<String> gender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName2;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblName4;
    private javax.swing.JLabel lblName5;
    private javax.swing.JLabel lblName6;
    private javax.swing.JLabel lblName7;
    private javax.swing.JLabel lblName8;
    private javax.swing.JLabel lblName9;
    private javax.swing.JTextField name;
    private javax.swing.JTextField pass;
    private javax.swing.JTextField patientid;
    private javax.swing.JComboBox<String> residence;
    private javax.swing.JTextArea search;
    private javax.swing.JComboBox<String> state;
    private javax.swing.JLabel state2;
    public static javax.swing.JTable tablep;
    private javax.swing.JLabel titlePatient;
    private javax.swing.JButton update;
    private javax.swing.JTextField username;
    private javax.swing.JButton view;
    private javax.swing.JComboBox<String> zipcode;
    private javax.swing.JLabel zipcodelabel;
    // End of variables declaration//GEN-END:variables


 private void populateTable() {
          DefaultTableModel model = (DefaultTableModel) tablep.getModel();
          model.setRowCount(0);
        
        for (Patient ep:p.getP()){
            
            Object[] row = new Object[2];
            row[0] = ep;
            row[1] = ep.getPatientId();
            
            model.addRow(row);
}     
   
        
   }
 
 private void populateCity(){
     String[] cc = c.cityArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     city.setModel(c);
     
 
}
private void populateCountry(){
     String[] cc = c.countryArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     country.setModel(c);
     
 }
private void populateState(){
     String[] cc = c.stateArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     state.setModel(c);
     
 }

private void populateCommunity(){
     String[] cc = co.communityArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     community.setModel(c);
     
 }
private void populateZipcode(){
     String[] cc = co.zipcodeArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     zipcode.setModel(c);
     
 }
private void populateHouse(){
     String[] cc = ho.houseArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     residence.setModel(c);
     
 }

}
