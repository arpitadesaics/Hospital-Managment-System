/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package doctor;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Doctor;
import model.VitalSigns;
import model.doctorArrayList;
import model.encounter;
import model.encounterArrayList;
import model.hospitalArrayList;
import model.patientArrayList;
import model.vitalsignsArrayList;

/**
 *
 * @author DELL
 */
public class vitalsignsDoc extends javax.swing.JPanel {

    /**
     * Creates new form vitalsignsDoc
     */
    encounterArrayList e;
    patientArrayList p;
    doctorArrayList d;
    hospitalArrayList h;
    vitalsignsArrayList vs;
    private Doctor doctor;
    public vitalsignsDoc(patientArrayList p,doctorArrayList d,hospitalArrayList h,encounterArrayList e,vitalsignsArrayList vs) {
        initComponents();
        this.e=e;
        this.p=p;
        this.h=h;
        this.d=d;
        this.vs=vs;
        createdby.setText(doctorPanel.display.getText());
        populateTable();
        populatePatientName();
        populatePatientUsername();
        populateDoctorName();
        populateDoctorUsername();
        populateHospitalname();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titlePatient = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablee = new javax.swing.JTable();
        encounterid = new javax.swing.JTextField();
        lblName3 = new javax.swing.JLabel();
        lblName5 = new javax.swing.JLabel();
        lblName6 = new javax.swing.JLabel();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        view = new javax.swing.JButton();
        lblName7 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        lblName8 = new javax.swing.JLabel();
        lblName9 = new javax.swing.JLabel();
        lblName10 = new javax.swing.JLabel();
        patientname = new javax.swing.JComboBox<>();
        hospitalname = new javax.swing.JComboBox<>();
        patientusername = new javax.swing.JComboBox<>();
        doctorname = new javax.swing.JComboBox<>();
        doctorusername = new javax.swing.JComboBox<>();
        time = new javax.swing.JTextField();
        roomno = new javax.swing.JTextField();
        encounterdate = new javax.swing.JTextField();
        createdby = new javax.swing.JTextField();
        lblName11 = new javax.swing.JLabel();

        titlePatient.setFont(new java.awt.Font("Sylfaen", 3, 36)); // NOI18N
        titlePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titlePatient.setText("Vital Signs");
        titlePatient.setToolTipText("");

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName.setText("Encounter Id");

        tablee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Name", "Doctor Name", "Encounter ID", "Hospital Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablee);

        lblName3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName3.setText("Hospital Name");

        lblName5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName5.setText("Doctor Username");

        lblName6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName6.setText("Doctor Name");

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        lblName7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName7.setText("Patient Username");

        lblName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName1.setText("Patient Name");

        lblName8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName8.setText("Blood Pressure");

        lblName9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName9.setText("Temperature");

        lblName10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName10.setText("Pulse");

        doctorusername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorusernameActionPerformed(evt);
            }
        });

        lblName11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblName11.setText("Created By");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblName1)
                                        .addComponent(lblName)
                                        .addComponent(lblName3)
                                        .addComponent(lblName7))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(patientusername, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(hospitalname, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(patientname, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(encounterid, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblName11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(createdby, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lblName5)
                                                .addComponent(lblName8)
                                                .addComponent(lblName9))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(lblName10)
                                                .addGap(9, 9, 9)))
                                        .addGap(13, 13, 13)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(roomno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(doctorusername, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblName6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(doctorname, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(encounterdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titlePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1253, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(titlePatient)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(encounterid, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName1)
                            .addComponent(patientname, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientusername, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName7))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hospitalname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName3))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName6))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorusername, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(encounterdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomno, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createdby, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName11)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(2322, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here
        int flag =1;
        String ss1 = encounterid.getText();

        if(ss1.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet");
            return;
        }
        char[] chars = ss1.toCharArray();
        for(char c : chars)
        {
            if(Character.isAlphabetic(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet");
                return;
            }
        }
        for (encounter epp:e.getE()){

            if(encounterid.getText().equals(epp.getEncounterNo()))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Encounter ID exists");
                return;

            }

        }
        int s1 = Integer.parseInt(ss1);

        String s2 = (String)patientname.getSelectedItem();
        if(s2.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
            return;
        }
        char[] chars2 = s2.toCharArray();
        for(char c : chars2)
        {
            if(Character.isDigit(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
                return;
            }
        }
        String s3 = (String)patientusername.getSelectedItem();
        if(s3.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Username cannot be empty");
            return;
        }
        String s4 = (String)hospitalname.getSelectedItem();
        if(s4.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
            return;
        }
        char[] chars4 = s4.toCharArray();
        for(char c : chars4)
        {
            if(Character.isDigit(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
                return;
            }
        }
        String s5 = (String)doctorname.getSelectedItem();
        if(s5.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
            return;
        }
        char[] chars5 = s5.toCharArray();
        for(char c : chars5)
        {
            if(Character.isDigit(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
                return;
            }
        }
        String s6 = (String)doctorusername.getSelectedItem();
        if(s6.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Username cannot be empty");
            return;
        }

        String s7 = encounterdate.getText();
        if(s7.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Please enter BP");
            return;
        }
         char[] chars6 = s7.toCharArray();
        for(char c : chars6)
        {
            if(Character.isAlphabetic(c) || (c=='-'))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"BP cannot have alphabets or be negative");
                return;
            }
        }
        
        String ss8 = (String)time.getText();
        if(ss8.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Please enter Temperature");
            return;
        }
         char[] chars7 = ss8.toCharArray();
        for(char c : chars7)
        {
            if(Character.isAlphabetic(c) || (c=='-'))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Temperature cannot have alphabets or be negative");
                return;
            }
        }
        float s8 = Float.parseFloat(ss8);

        String ss9 = roomno.getText();
        if(ss9.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Please enter Pulse");
            return;
        }
        char[] chars9 = ss9.toCharArray();
        for(char c : chars9)
        {
            if(Character.isAlphabetic(c) || (c=='-'))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Pulse cannot have alphabets or be negative");
                return;
            }
        }
       int s9 = Integer.parseInt(ss9);

        if(flag==1)
        {
            VitalSigns en = vs.addNewVS();
            en.setEncounterNo(s1);
            en.setPatientName(s2);
            en.setPatientUsername(s3);
            en.setHospitalName(s4);
            en.setDoctorName(s5);
            en.setDoctorUsername(s6);
            en.setBP(s7);
            en.setTemp(s8);
            en.setPulse(s9);

            JOptionPane.showMessageDialog(this,"VitalSigns created successfully");

            populateTable();

        }

        encounterid.setText("");
        patientname.setSelectedItem("select");
        patientusername.setSelectedItem("select");
        hospitalname.setSelectedItem("select");
        doctorname.setSelectedItem("select");
        doctorusername.setSelectedItem("select");
        encounterdate.setText("");
        time.setText("");
        roomno.setText("");

    }//GEN-LAST:event_createActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        int row = tablee.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablee.getModel();
        VitalSigns selectedep = (VitalSigns)model.getValueAt(row, 0);
        vs.deleteVS(selectedep);

         int flag =1;
        String ss1 = encounterid.getText();

        if(ss1.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet");
            return;
        }
        char[] chars = ss1.toCharArray();
        for(char c : chars)
        {
            if(Character.isAlphabetic(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Id field cannot be empty or contain alphabet");
                return;
            }
        }
        for (encounter epp:e.getE()){

            if(encounterid.getText().equals(epp.getEncounterNo()))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Encounter ID exists");
                return;

            }

        }
        int s1 = Integer.parseInt(ss1);

        String s2 = (String)patientname.getSelectedItem();
        if(s2.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
            return;
        }
        char[] chars2 = s2.toCharArray();
        for(char c : chars2)
        {
            if(Character.isDigit(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
                return;
            }
        }
        String s3 = (String)patientusername.getSelectedItem();
        if(s3.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Username cannot be empty");
            return;
        }
        String s4 = (String)hospitalname.getSelectedItem();
        if(s4.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
            return;
        }
        char[] chars4 = s4.toCharArray();
        for(char c : chars4)
        {
            if(Character.isDigit(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
                return;
            }
        }
        String s5 = (String)doctorname.getSelectedItem();
        if(s5.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
            return;
        }
        char[] chars5 = s5.toCharArray();
        for(char c : chars5)
        {
            if(Character.isDigit(c))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Name field cannot be empty or contain numbers");
                return;
            }
        }
        String s6 = (String)doctorusername.getSelectedItem();
        if(s6.equals("select"))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Username cannot be empty");
            return;
        }

        String s7 = encounterdate.getText();
        if(s7.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Please enter BP");
            return;
        }
         char[] chars6 = s7.toCharArray();
        for(char c : chars6)
        {
            if(Character.isAlphabetic(c) || (c=='-'))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"BP cannot have alphabets or be negative");
                return;
            }
        }
        
        String ss8 = (String)time.getText();
        if(ss8.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Please enter Temperature");
            return;
        }
         char[] chars7 = ss8.toCharArray();
        for(char c : chars7)
        {
            if(Character.isAlphabetic(c) || (c=='-'))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Temperature cannot have alphabets or be negative");
                return;
            }
        }
        float s8 = Float.parseFloat(ss8);

        String ss9 = roomno.getText();
        if(ss9.equals(""))
        {
            flag=0;
            JOptionPane.showMessageDialog(this,"Please enter Pulse");
            return;
        }
        char[] chars9 = ss9.toCharArray();
        for(char c : chars9)
        {
            if(Character.isAlphabetic(c) || (c=='-'))
            {
                flag=0;
                JOptionPane.showMessageDialog(this,"Pulse cannot have alphabets or be negative");
                return;
            }
        }
       int s9 = Integer.parseInt(ss9);

        if(flag==1)
        {
            VitalSigns en = vs.addNewVS();
            en.setEncounterNo(s1);
            en.setPatientName(s2);
            en.setPatientUsername(s3);
            en.setHospitalName(s4);
            en.setDoctorName(s5);
            en.setDoctorUsername(s6);
            en.setBP(s7);
            en.setTemp(s8);
            en.setPulse(s9);

            JOptionPane.showMessageDialog(this,"VitalSigns created successfully");

            populateTable();

        }

        encounterid.setText("");
        patientname.setSelectedItem("select");
        patientusername.setSelectedItem("select");
        hospitalname.setSelectedItem("select");
        doctorname.setSelectedItem("select");
        doctorusername.setSelectedItem("select");
        encounterdate.setText("");
        time.setText("");
        roomno.setText("");

    }//GEN-LAST:event_updateActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        // TODO add your handling code here:
        int row = tablee.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tablee.getModel();
        VitalSigns selectedep = (VitalSigns)model.getValueAt(row, 0);

        encounterid.setText(String.valueOf(selectedep.getEncounterNo()));
        patientname.setSelectedItem(String.valueOf(selectedep.getPatientName()));
        patientusername.setSelectedItem(String.valueOf(selectedep.getPatientUsername()));
        hospitalname.setSelectedItem(String.valueOf(selectedep.getHospitalName()));
        doctorname.setSelectedItem(String.valueOf(selectedep.getDoctorName()));
        doctorusername.setSelectedItem(String.valueOf(selectedep.getDoctorUsername()));
        encounterdate.setText(String.valueOf(selectedep.getBP()));
        time.setText(String.valueOf(selectedep.getTemp()));
        roomno.setText(String.valueOf(selectedep.getPulse()));
    }//GEN-LAST:event_viewActionPerformed

    private void doctorusernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorusernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorusernameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton create;
    private javax.swing.JTextField createdby;
    private javax.swing.JComboBox<String> doctorname;
    private javax.swing.JComboBox<String> doctorusername;
    private javax.swing.JTextField encounterdate;
    private javax.swing.JTextField encounterid;
    private javax.swing.JComboBox<String> hospitalname;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblName10;
    private javax.swing.JLabel lblName11;
    private javax.swing.JLabel lblName3;
    private javax.swing.JLabel lblName5;
    private javax.swing.JLabel lblName6;
    private javax.swing.JLabel lblName7;
    private javax.swing.JLabel lblName8;
    private javax.swing.JLabel lblName9;
    private javax.swing.JComboBox<String> patientname;
    private javax.swing.JComboBox<String> patientusername;
    private javax.swing.JTextField roomno;
    private javax.swing.JTable tablee;
    private javax.swing.JTextField time;
    private javax.swing.JLabel titlePatient;
    private javax.swing.JButton update;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables

private void populateTable() {
          DefaultTableModel model = (DefaultTableModel) tablee.getModel();
          model.setRowCount(0);
        
        for (VitalSigns ep:vs.getVs()){
            if(createdby.getText().equals(ep.getDoctorUsername())){
            
            Object[] row = new Object[4];
            row[0] = ep;
            row[1] = ep.getDoctorName();
            row[2] = ep.getEncounterNo();
            row[3] = ep.getHospitalName();
            
            
            
            
            
            model.addRow(row);
            }
}     
   
        
   }

private void populatePatientName(){
     String[] cc = p.patientNameArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     patientname.setModel(c);
     
 }
private void populatePatientUsername(){
     String[] cc = p.patientUsernameArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     patientusername.setModel(c);
     
 }
private void populateDoctorName(){
     String[] cc = d.doctorNameArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     doctorname.setModel(c);
     
 }
private void populateDoctorUsername(){
     String[] cc = d.doctorUsernameArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     doctorusername.setModel(c);
     
 }
    
 private void populateHospitalname(){
     String[] cc = h.hospitalnameArray();
     DefaultComboBoxModel c = new DefaultComboBoxModel(cc);
     hospitalname.setModel(c);
     
 }

}
